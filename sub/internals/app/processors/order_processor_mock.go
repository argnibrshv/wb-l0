// Code generated by MockGen. DO NOT EDIT.
// Source: order_processor.go

// Package processors is a generated GoMock package.
package processors

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockOrdersStorageInterface is a mock of OrdersStorageInterface interface.
type MockOrdersStorageInterface struct {
	ctrl     *gomock.Controller
	recorder *MockOrdersStorageInterfaceMockRecorder
}

// MockOrdersStorageInterfaceMockRecorder is the mock recorder for MockOrdersStorageInterface.
type MockOrdersStorageInterfaceMockRecorder struct {
	mock *MockOrdersStorageInterface
}

// NewMockOrdersStorageInterface creates a new mock instance.
func NewMockOrdersStorageInterface(ctrl *gomock.Controller) *MockOrdersStorageInterface {
	mock := &MockOrdersStorageInterface{ctrl: ctrl}
	mock.recorder = &MockOrdersStorageInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockOrdersStorageInterface) EXPECT() *MockOrdersStorageInterfaceMockRecorder {
	return m.recorder
}

// GetOrderByID mocks base method.
func (m *MockOrdersStorageInterface) GetOrderByID(arg0 string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetOrderByID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetOrderByID indicates an expected call of GetOrderByID.
func (mr *MockOrdersStorageInterfaceMockRecorder) GetOrderByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetOrderByID", reflect.TypeOf((*MockOrdersStorageInterface)(nil).GetOrderByID), arg0)
}

// MockordersCacheInterface is a mock of ordersCacheInterface interface.
type MockordersCacheInterface struct {
	ctrl     *gomock.Controller
	recorder *MockordersCacheInterfaceMockRecorder
}

// MockordersCacheInterfaceMockRecorder is the mock recorder for MockordersCacheInterface.
type MockordersCacheInterfaceMockRecorder struct {
	mock *MockordersCacheInterface
}

// NewMockordersCacheInterface creates a new mock instance.
func NewMockordersCacheInterface(ctrl *gomock.Controller) *MockordersCacheInterface {
	mock := &MockordersCacheInterface{ctrl: ctrl}
	mock.recorder = &MockordersCacheInterfaceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockordersCacheInterface) EXPECT() *MockordersCacheInterfaceMockRecorder {
	return m.recorder
}

// AddToCache mocks base method.
func (m *MockordersCacheInterface) AddToCache(arg0, arg1 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "AddToCache", arg0, arg1)
}

// AddToCache indicates an expected call of AddToCache.
func (mr *MockordersCacheInterfaceMockRecorder) AddToCache(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddToCache", reflect.TypeOf((*MockordersCacheInterface)(nil).AddToCache), arg0, arg1)
}

// FindByID mocks base method.
func (m *MockordersCacheInterface) FindByID(arg0 string) (string, bool) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByID", arg0)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(bool)
	return ret0, ret1
}

// FindByID indicates an expected call of FindByID.
func (mr *MockordersCacheInterfaceMockRecorder) FindByID(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByID", reflect.TypeOf((*MockordersCacheInterface)(nil).FindByID), arg0)
}
